const mineflayer = require('mineflayer');
const webInventory = require('mineflayer-web-inventory');
const { pathfinder, Movements, goals: { GoalBlock } } = require('mineflayer-pathfinder');

let bot;
const INVENTORY_PORT = 3002;
let checkClockInterval;

function createBot() {
  let loggedIn = false;
  let menuOpened = false;

  bot = mineflayer.createBot({
    host: 'mc.luckyvn.com',
    username: 'Vanguard02',
    version: '1.18.2'
  });

  bot.loadPlugin(pathfinder);
  webInventory(bot, { port: INVENTORY_PORT });

  bot.once('spawn', () => {
    const defaultMove = new Movements(bot);
    bot.pathfinder.setMovements(defaultMove);

    console.log("üü¢ Bot ƒë√£ v√†o game, ch·ªù login...");
    console.log(`üåê Xem inventory t·∫°i: http://localhost:${INVENTORY_PORT}`);

    // Ki·ªÉm tra Clock slot 4 m·ªói 10s
    checkClockInterval = setInterval(() => {
      if (loggedIn && !menuOpened) {
        const slot4 = bot.inventory.slots[36 + 4]; // Hotbar slot 4 (index 40)
        
        if (slot4?.name === 'minecraft:clock') {
          bot.setQuickBarSlot(4);
          bot.activateItem();
        }
      }
    }, 10000);
  });

  bot.on('message', (message) => {
    const msg = message.toString();
    if (message.toAnsi) console.log(message.toAnsi());
    else console.log(msg);

    // X·ª≠ l√Ω login
    if (msg.includes('/login') && !loggedIn) {
      bot.chat('/login Phuc2005');
      loggedIn = true;
      console.log("üîê ƒê√£ g·ª≠i l·ªánh /login");
    }

    // M·ªü menu sau khi login
    if (msg.includes('ƒêƒÉng nh·∫≠p th√†nh c√¥ng') && !menuOpened) {
      setTimeout(() => {
        console.log("üïπ D√πng ƒë·ªìng h·ªì m·ªü menu ch·ªçn ch·∫ø ƒë·ªô");
        bot.setQuickBarSlot(4);
        bot.activateItem();
      }, 1000);
    }

    // Click ch·∫ø ƒë·ªô
    if (msg.includes('B·∫°n ƒë√£ m·ªü b·∫£ng ch·ªçn m√°y ch·ªß!') && !menuOpened) {
      console.log("üì• Menu m·ªü, chu·∫©n b·ªã click slot 22 v√† 34");
      menuOpened = true;

      setTimeout(() => {
        bot.clickWindow(22, 0, 0);
        console.log("‚úÖ Click slot 22 - Survival");
      }, 1000);

      setTimeout(() => {
        bot.clickWindow(34, 0, 0);
        console.log("‚úÖ Click slot 34 - Rainbow");
      }, 2500);
    }
  });

  // Reset tr·∫°ng th√°i khi v√†o s·∫£nh
  bot.on('respawn', () => {
    menuOpened = false;
    console.log('‚ôªÔ∏è ƒê√£ reset tr·∫°ng th√°i menu khi v√†o s·∫£nh');
  });

  // L·ªánh ƒëi·ªÅu khi·ªÉn t·ª´ terminal
  process.stdin.on('data', async data => {
    const input = data.toString().trim();

    // L·ªánh #goto
    if (input.startsWith('#goto')) {
      const args = input.split(' ').slice(1);
      if (args.length === 3) {
        const z = parseInt(args[2]);
        if (isNaN(z)) return console.log("‚ö†Ô∏è T·ªça ƒë·ªô z kh√¥ng h·ª£p l·ªá!");
        
        const x = 23, y = 55;
        try {
          console.log(`üß≠ ƒêang ƒëi ƒë·∫øn ${x} ${y} ${z}...`);
          await bot.pathfinder.goto(new GoalBlock(x, y, z));
          console.log("‚úÖ ƒê√£ ƒë·∫øn ƒë√≠ch");
        } catch (err) {
          console.log("‚ö†Ô∏è L·ªói di chuy·ªÉn:", err.message);
        }
      } else {
        console.log("‚ö†Ô∏è D√πng: #goto x y z");
      }
      return;
    }

    // L·ªánh #look
    if (input.startsWith('#look')) {
      const args = input.split(' ').slice(1);
      if (args.length === 2) {
        const yaw = parseFloat(args[0]);
        const pitch = parseFloat(args[1]);
        if (isNaN(yaw) || isNaN(pitch)) return console.log("‚ö†Ô∏è G√≥c kh√¥ng h·ª£p l·ªá");
        
        try {
          await bot.look(yaw * Math.PI/180, pitch * Math.PI/180);
          console.log(`üëÄ ƒê√£ xoay: yaw ${yaw}¬∞, pitch ${pitch}¬∞`);
        } catch (err) {
          console.log("‚ö†Ô∏è L·ªói xoay:", err.message);
        }
      } else {
        console.log("‚ö†Ô∏è D√πng: #look yaw pitch");
      }
      return;
    }

    // G·ª≠i chat th∆∞·ªùng
    if (input) {
      bot.chat(input);
      console.log(`‚å®Ô∏è Chat: ${input}`);
    }
  });

  // X·ª≠ l√Ω s·ª± ki·ªán
  bot.on('kicked', (reason) => {
    clearInterval(checkClockInterval);
    console.log("‚ùå B·ªã kick:", reason);
    reconnect();
  });

  bot.on('end', () => {
    clearInterval(checkClockInterval);
    console.log("‚ùå ƒê√£ ng·∫Øt k·∫øt n·ªëi");
    reconnect();
  });

  bot.on('error', err => console.log("‚ö†Ô∏è L·ªói:", err));
}

function reconnect() {
  console.log("‚ôªÔ∏è T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5s...");
  setTimeout(createBot, 5000);
}

createBot();